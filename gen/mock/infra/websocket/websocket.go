// Code generated by MockGen. DO NOT EDIT.
// Source: infra/websocket/websocket.go

// Package mock_websocket is a generated GoMock package.
package mock_websocket

import (
	gomock "github.com/golang/mock/gomock"
	websocket "gomsgapi/infra/websocket"
	http "net/http"
	reflect "reflect"
)

// MockWebsocket is a mock of Websocket interface
type MockWebsocket struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketMockRecorder
}

// MockWebsocketMockRecorder is the mock recorder for MockWebsocket
type MockWebsocketMockRecorder struct {
	mock *MockWebsocket
}

// NewMockWebsocket creates a new mock instance
func NewMockWebsocket(ctrl *gomock.Controller) *MockWebsocket {
	mock := &MockWebsocket{ctrl: ctrl}
	mock.recorder = &MockWebsocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebsocket) EXPECT() *MockWebsocketMockRecorder {
	return m.recorder
}

// RegisterListener mocks base method
func (m *MockWebsocket) RegisterListener(listener websocket.Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterListener", listener)
}

// RegisterListener indicates an expected call of RegisterListener
func (mr *MockWebsocketMockRecorder) RegisterListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockWebsocket)(nil).RegisterListener), listener)
}

// Open mocks base method
func (m *MockWebsocket) Open(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockWebsocketMockRecorder) Open(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockWebsocket)(nil).Open), w, r)
}

// Broadcast mocks base method
func (m *MockWebsocket) Broadcast(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockWebsocketMockRecorder) Broadcast(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockWebsocket)(nil).Broadcast), message)
}
